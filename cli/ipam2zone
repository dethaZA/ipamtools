#!/usr/bin/python

import sys
import time
import re
import configparser
from phpipamclient import IPAMClient

class ZoneClient(IPAMClient):
	def __init__(self, host, app, user, passwd, conf):
		super(ZoneClient, self).__init__(host, app, user, passwd)
		self.conf = conf

	def arpa(self, subnet):
		r=re.compile("(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})")
		# TBD: 6ification
		m=r.match(subnet)
		if not m:
			raise Exception("Can not determine subnet for reverse zone")
		res="in-addr.arpa"
		mask=int(m.group(5))
		idx=1
		while mask>0:
			res=m.group(idx)+"."+res
			idx += 1
			mask -= 8
		return res

	def nameservers(self, section, fp):
		r=re.compile("^ns\d*", re.IGNORECASE)
		for i in conf.options(section):
			if r.match(i):
				fp.write("\t\t\tNS\t"+conf.get(section, i)+".\n")

	def mailers(self, section, fp):
		r=re.compile("^mx\d*", re.IGNORECASE)
		for i in conf.options(section):
			if r.match(i):
				fp.write("\t\t\tMX\t"+conf.get(section, i)+"\n")

	def zoneheader(self, section, fp):
		# push out templated stuffs
		fp.write("$ORIGIN .\n")
		fp.write("$TTL\t"+conf.get(section, "zonettl")+"\n")
		fp.write(conf.get(section, "domain")+"\t\tIN SOA\t"+conf.get(section, "soa")+" "+conf.get(section, "contact")+" (\n")
		fp.write("\t\t\t"+time.strftime("%Y%m%d00")+"\t; serial\n")
		fp.write("\t\t\t"+conf.get(section, "refresh")+"\t; refresh\n")
		fp.write("\t\t\t"+conf.get(section, "retry")+"\t; retry\n")
		fp.write("\t\t\t"+conf.get(section, "expire")+"\t; expire\n")
		fp.write("\t\t\t"+conf.get(section, "minimum")+"\t; minimum\n")
		fp.write("\t\t\t)\n")
		self.nameservers(section, fp)
		self.mailers(section, fp)
		fp.write("\n$ORIGIN "+conf.get(section, "domain")+".\n")

	def miscrecords(self, section, fp, domain):
		if conf.get(section, "ttlmisc", fallback=None) != None:
			fp.write("$TTL\t"+conf.get(section, "ttlmisc")+"\n")

		r=re.compile("^txt\d*", re.IGNORECASE)
		for i in conf.options(section):
			if r.match(i):
				fp.write("\t\t\tTXT\t"+conf.get(section, i)+"\n")

	def arecords(self, section, fp, domain):
		fp.write("$TTL\t"+conf.get(section, "ttl")+"\n")

		r=re.compile('([^ ]+)\.'+domain+"\.?\s*$")

		a=self.getaddressesbytype(IPAMClient.TYPE_USED)
		for j in a:
			names=[ j['hostname'] ]
			if j['dnames']:
				names=names + j['dnames'].replace(',', ' ').split(" ")
			for hostname in names:
				m=r.match(hostname)
				if m:
					hostname=m.group(1)
					if j['ip'].find(':')>=0:
						fp.write(hostname+"\t\t\tAAAA\t"+j['ip']+"\n")
					else:
						fp.write(hostname+"\t\t\tA\t"+j['ip']+"\n")

			# we have a custom field 'cnames' with a list of cnames for the box
			cnames=j['cnames']
			if cnames:
				for cname in j['cnames'].replace(',', ' ').split(" "):
					m=r.match(cname)
					if m:
						cname=m.group(1)
						fp.write(cname+"\t\t\tCNAME\t"+hostname+"."+domain+".\n")


	def hosts(self, section, fp):
		domain=conf.get(section, "domain")
		self.miscrecords(section, fp, domain)
		self.arecords(section, fp, domain)

	def reverseaddr(self, address, origin=None):
		if origin:
			if address[:len(origin)] != origin:
				raise Exception("Address "+address+" does not belong in "+origin)
			address = address[len(origin)+1:]
		l=address.split('.')
		l.reverse()
		return '.'.join(l)

	def reverseheader(self, section, fp):
		domain=self.arpa(section)
		# push out templated stuffs
		fp.write("$ORIGIN .\n")
		fp.write("$TTL\t"+conf.get(section, "zonettl")+"\n")
		fp.write(domain+"\t\tIN SOA\t"+conf.get(section, "soa")+" "+conf.get(section, "contact")+" (\n")
		fp.write("\t\t\t"+time.strftime("%Y%m%d00")+"\t; serial\n")
		fp.write("\t\t\t"+conf.get(section, "refresh")+"\t; refresh\n")
		fp.write("\t\t\t"+conf.get(section, "retry")+"\t; retry\n")
		fp.write("\t\t\t"+conf.get(section, "expire")+"\t; expire\n")
		fp.write("\t\t\t"+conf.get(section, "minimum")+"\t; minimum\n")
		fp.write("\t\t\t)\n")
		self.nameservers(section, fp)
		fp.write("\n$ORIGIN in-addr.arpa.\n")

	def ptrrecords(self, section, fp, netid):
		r=re.compile('(.+)\.'+conf.get(section, "domain")+"\.?")

		# first this net
		a=self.getsubnetaddresses(netid)
		for j in a:
			hostname=j['hostname']
			m=r.match(hostname)
			if not m:
				hostname=hostname+conf.get(section, "domain")
			fp.write(self.reverseaddr(j['ip'])+"\tPTR\t"+hostname+".\n")

		# now anything hanging off it
		d=self.getslavenets(netid)
		for i in d:
			self.ptrrecords(section, fp, i['id'])

	def rhosts(self, section, fp):
		net=self.getsubnetbycidr(section)
		self.ptrrecords(section, fp, net[0]["id"])

	def process(self, section):
		if section.find('/')<0:
			# forward section
			if "zonefile" in conf.options(section):
				fp=open(conf.get(section, "zonefile"), "w")
			else:
				fp=sys.stdout
			self.zoneheader(section, fp)
			self.hosts(section, fp)
			if fp!=sys.stdout:
				fp.close()
		else:
			# reverse section
			if "reversefile" in conf.options(section):
				fp=open(conf.get(section, "reversefile"), "w")
			else:
				fp=sys.stdout
			self.reverseheader(section, fp)
			self.rhosts(section, fp)

		if fp!=sys.stdout:
			fp.close()


if __name__=="__main__":

	if len(sys.argv)<=1:
		sys.stderr.write("Usage: "+sys.argv[0]+" <configfile>\n")
		exit(1)

	conf=configparser.ConfigParser()
	conf.read(sys.argv[1])

	# TBD CLI overrides of config options

	sysconf=configparser.ConfigParser()
	sysconf.read("/etc/phpipamtools.cfg")
	host=sysconf.get("ipam", "host")
	app=sysconf.get("ipam", "appid")
	user=sysconf.get("ipam", "user")
	password=sysconf.get("ipam", "password")

	client = ZoneClient(host, app, user, password, conf)
	for i in conf.sections():
		client.process(i)
